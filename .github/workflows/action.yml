name: CI

run-name: ${{ github.actor }} - ${{ github.event_name }} - ${{ github.sha }}

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

jobs:
    upload-artifact:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1
            - name: Build and export
              uses: docker/build-push-action@v2
              with:
                  context: .
                  file: ./Dockerfile
                  tags: name/app:latest
                  outputs: type=oci,dest=/tmp/image.tar

    # test:
    #     needs: [install]
    #     runs-on: ubuntu-latest
    #     strategy:
    #         matrix:
    #             browser: [chrome, edge]
    #     steps:
    #         - uses: actions/checkout@v2
    #         - uses: actions/cache/restore@v3
    #           with:
    #               path: |
    #                   ~/.cache/Cypress
    #                   node_modules
    #               key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
    #         - uses: actions/cache/restore@v3
    #           with:
    #               path: |
    #                   ~/.npm
    #                   ${{ github.workspace }}/.next
    #               key: ${{ runner.os }}-node-${{ github.sha }}
    #         - name: Cypress run
    #           uses: cypress-io/github-action@v6
    #           with:
    #               config-file: cypress.config.ts
    #               start: npm run start
    #               install: false
    #               browser: ${{ matrix.browser }}
    #         - name: Upload Cypress videos
    #           uses: actions/upload-artifact@v4
    #           with:
    #               name: cypress-videos-${{ matrix.browser }}
    #               path: cypress/videos

    # deploy:
    #     needs: [install]
    #     runs-on: ubuntu-latest
    #     steps:
    #         - uses: webfactory/ssh-agent@v0.8.0
    #           with:
    #               ssh-private-key: ${{ secrets.SSH_KEY }}
    #         - run: |
    #               ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "\
    #               cd ~/intro-to-ci-cd-celian-hamon && \
    #               git pull && \
    #               sudo docker compose down && \
    #               sudo docker compose up -d --build"
